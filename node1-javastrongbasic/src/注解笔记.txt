注解(Annotation)：
    定义：注解也叫元数据，一张代码级别的说明，jdk1.5+之后的新特性，与类、接口、枚举是同一层次，它可以声明
    包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明。
    概念：说明程序的。给计算机看的
    注释：用文字描述程序的，给程序员看的
    作用分类：
        编写文档：通过代码里标识的元数据生成文档（生成doc文档）
        代码分析：通过代码里标识的元数据对代码进行分析【使用反射】
        编译检查：通过代码里标识的元数据让编译器能够实现基本的编译检查


     自定义注解：
        格式：

            元注解
            public @interface 注解名称{
                属性列表;
            }

        本质：注解本质就是一个接口，连接口默认继承Annotation
            public interface 注解名称 extends java.lang.annotation.Annotation{}

        属性：接口中的抽象方法
            要求
                1.属性的返回值类型有下列取值
                    基本数据类型
                    String
                    枚举
                    注解
                    以上类型的数组
                2.定义了属性，使用时需要赋值
                    1.如果定义属性是，使用default关键之给属性默认初始化值，则使用时可以不用赋值
                    2.如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可
                    3.数组赋值时，使用{}包裹，如果数组只有一个值。{}可以省略

        元注解：描述注解的注解
            @Target：描述注解能够作用的位置
            @Retention：描述注解被保留的阶段
            @Documented：描述注解是否被抽取到API文档中
            @Inherited：代表该注解可被继承


    注解：
     * 		1.“元”
     * 			数据 之于 元数据：数据库中存放的都是数据，其中字段名称就是元数据，元数据就是描述数据的数据。
     * 			代码 之于 元代码：实现java程序功能的都是代码，其中注解就是元代码，元代码就是描述代码的代码。
     * 			注解 之于 元注解：描述注解的注解。
     * 		2.jdk1.5+的新特性
     * 		3.jdk自带的注解：
     * 			1.Override：重写   检测被该注解标注的方法是否继承自父类
     * 			2.Deprecated：过时的    将该注解标注的内容，表示已过时
     * 			3.SuppressWarnings：抑制警告     压制警告
                    一般传参all @SuppressWarning("all")
     * 		4.注解的分类（按照运行机制分类）：
     * 			1.源码注解：注解只存在与源码中，在.class文件中不存在。
     * 			2.编译时注解：存在与源码中和.class文件中，jdk自带的注解都是编译时注解。
     * 			3.运行时注解：存在与源码中和.class文件中，并且在程序运行阶段影响运行逻辑。例如：Spring框架中的@Autowired
     * 		5.自定义注解：
     * 			1.关键字：@interface
     * 			2.使用元注解描述自定义注解：
     * 				1.@Target(ElementType.METHOD)：代表本注解的可作用目标
     * 				2.@Retention(RetentionPolicy.RUNTIME)：代表该注解的生存周期。
     * 				3.@Documented：代表在生成的doc文档上，出现该注解。
     * 				4.@Inherited：代表该注解可被继承。
